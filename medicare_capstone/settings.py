"""
Django settings for medicare_capstone project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import json
from django.conf import settings
from pathlib import Path
from sqlalchemy import create_engine, MetaData # type: ignore
from sqlalchemy.orm import sessionmaker # type: ignore
from dotenv import load_dotenv # type: ignore
from medicare_capstone.utils.db_config import (
    db_connect
)

from corsheaders.defaults import default_headers # type: ignore
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d&q)w*ei7(o9gg=e5zdu+)j)32o-3e$^k^d9ev2luztysoq_@a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'corsheaders',  # ADD THIS LINE - CORS headers must be at the top
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'contacts'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # ADD THIS LINE - CORS middleware must be at the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medicare_capstone.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'medicare_capstone.wsgi.application'


# REST FRAMEWORK SETTINGS
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'travel_auth.jwt_auth.JWTAuthentication'
    # ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # CHANGED: Allow any for testing
    ],
    'EXCEPTION_HANDLER': 'travel_backend.utils.exception_handler.custom_exception_handler',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
    'VERSION_PARAM': 'version',
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
}


# LOGGING CONFIGURATION
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)
LOG_BASE_PATH = LOG_DIR

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '||'.join([
                'CREATED ON: %(asctime)s',
                'LEVEL: %(levelname)s',
                'LOGGER: %(name)s',
                'PATH: %(pathname)s',
                'FILE NAME: %(filename)s',
                'MODULE: %(module)s',
                'FUNCTION NAME: %(funcName)s',
                'LINE NO: %(lineno)d',
                'MESSAGE: %(message)s'
            ]),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'file': {
            'format': '||'.join([
                'CREATED ON: %(asctime)s',
                'LEVEL: %(levelname)s',
                'LOGGER: %(name)s',
                'PATH: %(pathname)s',
                'FILE NAME: %(filename)s',
                'MODULE: %(module)s',
                'FUNCTION NAME: %(funcName)s',
                'LINE NO: %(lineno)d',
                'MESSAGE: %(message)s'
            ]),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
            'level': 'WARNING',  # Less verbose in production
        },
        # 'medicare_auth.file': {
        #     'level': 'INFO',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'formatter': 'file',
        #     'filename': os.path.join(LOG_BASE_PATH, 'medicare_auth.log'),
        #     'maxBytes': 1024 * 1024 * 5,  # 5MB
        #     'backupCount': 5,
        #     'encoding': 'utf-8',
        # },
        'contacts.file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'file',
            'filename': os.path.join(LOG_BASE_PATH, 'contacts.log'),
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'encoding': 'utf-8',
        }
    },
    'loggers': {
        # 'medicare_auth': {
        #     'handlers': ['console', 'medicare_auth.file'],
        #     'level': 'INFO',
        #     'propagate': False,
        # },
        'contacts': {
            'handlers': ['console', 'contacts.file'],
            'level': 'INFO',
            'propagate': False,
        },
        '': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        }
    }
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS SETTINGS - UPDATED AND EXPANDED
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Allow credentials
CORS_ALLOW_CREDENTIALS = True

# Allow all methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow all headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF settings for development
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# For development - disable CSRF for API endpoints (NOT for production)
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False

# sqlacodegen mysql://user:password@localhost/dbname --tables
# sqlacodegen mysql://root:amit@localhost/medicare --tables driver_post,passenger_post